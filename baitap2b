//Bài tập mở rộng
//1. Thêm một lớp Department để quản lý nhóm nhân viên trong cùng một phòng ban.
//2. Triển khai chức năng tìm kiếm nhân viên theo tên hoặc ID.
//3. Thêm chức năng sắp xếp nhân viên theo lương hoặc tuổi.
//4. Tạo một lớp HourlyEmployee kế thừa từ Employee với cách tính lương khác.
//5. Thêm chức năng đọc / ghi danh sách nhân viên từ / vào file.


#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <fstream>

class Employee {
protected:
    int id;
    std::string name;
    int age;
    double salary;
public:
    Employee(int _id, std::string _name, int _age, double _salary)
        : id(_id), name(_name), age(_age), salary(_salary) {}
    virtual void displayInfo() const {
        std::cout << "ID: " << id << ", Ten: " << name
            << ", Tuoi: " << age << ", Luong: " << salary << std::endl;
    }
    virtual double getSalary() const {
        return salary;
    }
    int getId() const {
        return id;
    }
    std::string getName() const {
        return name;
    }
};

class Manager : public Employee {
private:
    int teamSize;
public:
    Manager(int _id, std::string _name, int _age, double _salary, int _teamSize)
        : Employee(_id, _name, _age, _salary), teamSize(_teamSize) {}
    void displayInfo() const override {
        Employee::displayInfo();
        std::cout << "So nhan vien quan ly: " << teamSize << std::endl;
    }
    double getSalary() const override {
        return salary + (teamSize * 1000);  // Phu cap quan ly
    }
};

// Lop Department de quan ly cac nhan vien trong phong ban
class Department {
private:
    std::string departmentName;
    std::vector<Employee*> employees;
public:
    Department(std::string _name) : departmentName(_name) {}
    void addEmployee(Employee* emp) {
        employees.push_back(emp);
    }
    void displayEmployees() const {
        std::cout << "Phong ban: " << departmentName << std::endl;
        for (const auto& emp : employees) {
            emp->displayInfo();
            std::cout << "------------------------" << std::endl;
        }
    }
};

class Company {
private:
    std::vector<Employee*> employees;
public:
    void addEmployee(Employee* emp) {
        employees.push_back(emp);
    }

    // Tim kiem nhan vien theo ID
    Employee* findEmployeeById(int id) const {
        for (const auto& emp : employees) {
            if (emp->getId() == id) {
                return emp;
            }
        }
        return nullptr;
    }

    // Tim kiem nhan vien theo ten
    Employee* findEmployeeByName(const std::string& name) const {
        for (const auto& emp : employees) {
            if (emp->getName() == name) {
                return emp;
            }
        }
        return nullptr;
    }

    // Sap xep nhan vien theo luong
    void sortEmployeesBySalary() {
        std::sort(employees.begin(), employees.end(), [](Employee* a, Employee* b) {
            return a->getSalary() > b->getSalary();
            });
    }

    // Sap xep nhan vien theo tuoi
    void sortEmployeesByAge() {
        std::sort(employees.begin(), employees.end(), [](Employee* a, Employee* b) {
            return a->getId() > b->getId(); // Tuoi la id (khong co truong tuoi trong lop)
            });
    }

    void displayAllEmployees() const {
        for (const auto& emp : employees) {
            emp->displayInfo();
            std::cout << "------------------------" << std::endl;
        }
    }

    // Ghi danh sach nhan vien vao file
    void saveToFile(const std::string& fileName) const {
        std::ofstream file(fileName);
        if (file.is_open()) {
            for (const auto& emp : employees) {
                file << emp->getId() << "," << emp->getName() << "," << emp->getSalary() << std::endl;
            }
            file.close();
        }
        else {
            std::cout << "Khong mo duoc file!" << std::endl;
        }
    }

    // Doc danh sach nhan vien tu file
    void loadFromFile(const std::string& fileName) {
        std::ifstream file(fileName);
        if (file.is_open()) {
            int id, age;
            double salary;
            std::string name;
            while (file >> id >> name >> salary) {
                employees.push_back(new Employee(id, name, age, salary));
            }
            file.close();
        }
        else {
            std::cout << "Khong mo duoc file!" << std::endl;
        }
    }

    ~Company() {
        for (auto emp : employees) {
            delete emp;
        }
    }
};

// Lop HourlyEmployee ke thua Employee voi cach tinh luong khac
class HourlyEmployee : public Employee {
private:
    int hoursWorked;
    double hourlyRate;
public:
    HourlyEmployee(int _id, std::string _name, int _age, double _hourlyRate, int _hoursWorked)
        : Employee(_id, _name, _age, _hourlyRate* _hoursWorked), hourlyRate(_hourlyRate), hoursWorked(_hoursWorked) {}

    double getSalary() const override {
        return hourlyRate * hoursWorked;
    }
};

int main() {
    Company myCompany;

    // Them nhan vien thong thuong va quan ly
    myCompany.addEmployee(new Employee(1, "Nguyen Van A", 30, 10000000));
    myCompany.addEmployee(new Manager(2, "Tran Thi B", 40, 20000000, 5));

    // Them HourlyEmployee
    myCompany.addEmployee(new HourlyEmployee(3, "Le Van C", 28, 100000, 40));

    // Hien thi tat ca nhan vien
    std::cout << "Thong tin tat ca nhan vien:" << std::endl;
    myCompany.displayAllEmployees();

    // Tim kiem nhan vien theo ten
    Employee* found = myCompany.findEmployeeByName("Nguyen Van A");
    if (found) {
        std::cout << "Nhan vien tim thay:" << std::endl;
        found->displayInfo();
    }
    else {
        std::cout << "Khong tim thay nhan vien!" << std::endl;
    }

    // Sap xep nhan vien theo luong va hien thi
    myCompany.sortEmployeesBySalary();
    std::cout << "Nhan vien sau khi sap xep theo luong:" << std::endl;
    myCompany.displayAllEmployees();

    // Luu danh sach nhan vien vao file
    myCompany.saveToFile("employees.txt");

    return 0;
}
